unit unitClasses4Devices;

// Юнит с описанием основных классов для устройств
interface

uses
  vcl.extctrls, // Для доступа к TImage
  vcl.controls, // Для доступа к TMouseButton
  winapi.windows, // Там описание типа hicon
  system.classes, // Там объявлен класс TPersistent
  math; // Для NaN, IsNan

Type

  TResStack = array of boolean;

  TRCPort = class; // Опережающее объявление класса TPort
  TDevice = class; // Опережающее объявление класса TDevice
  TNode = class; // Опережающее объявление класса TNode
  TRCPorts = array of TRCPort; // Тип - порты (массив обычных портов)
  TDevices = array of TDevice; // Массив устройств
  TNodes = array of TNode; // Массив узлов
  TArrayChar = array of ansichar;
  TAshortstrings = array of shortstring; // Массив малых строк
  // Call-back методы
  TBackProcDraw = procedure(Sender: TObject; isRunning: boolean;
    RunningTime: Extended); stdcall; // Процедура обратного вызова перерисовки
  TBackClick = procedure(Sender: TObject); stdcall;
  TBackShowSettings = procedure(Sender: TObject); stdcall;
  TBackApplySaveData = procedure(Sender: TObject); stdcall;
  TBackTact = procedure(Sender: TObject; Tact: Int64); stdcall;
  TBackMouseDown = procedure(Sender: TObject; Button: TMouseButton;
    Shift: TShiftState; X, Y: Integer); stdcall;
  TBackMouseMove = procedure(Sender: TObject; Shift: TShiftState;
    X, Y: Integer); stdcall;
  TBackMouseUp = procedure(Sender: TObject; Button: TMouseButton;
    Shift: TShiftState; X, Y: Integer); stdcall;
  TBackDblClick = procedure(Sender: TObject); stdcall;
  // Функция обратного вызова уровня сигнала
  TBackProcGetLevel = function(Sender: TObject): single; stdcall;
  TGet_MCandCF = procedure(var vMC: Int64; var vCF: Integer); stdcall;

  // "Узловой" класс - узел node
  TNode = class sealed(TObject)
  private // Тут внутренние поля

  public // Конструктор, деструктор, массивы, переменные
    Ports: TRCPorts; // Массив ссылок на порты
  published // свойства, методы
    Function GetLevel(): single; stdcall;
  end;

  TInfoDevice = class sealed(TObject)
  public
    vType: byte; // Тип (байт)
    vSType: shortstring; // Тип (Строкой) ?
    vSFamily: shortstring; // Семейство (строкой)?
    vSModel: TAshortstrings; // TAshortstrings; //Модель (Строкой)?
    vSDisplayName: shortstring; // Показываемое имя (на панели)
    vIcon: hicon; // Иконка
    evFileName: shortstring; // Имя файла и путь к dll
    evLoaded: boolean; // Загружена ли в память dll-ка
    evLibHandle: THandle; // Хэндл загруженной библиотеки
    // Функции, экспортируемые из dll-ки
    Get_info_class: function(): TInfoDevice; stdcall;
    Get_Device_class: Function(HostHandle: THandle; MainDevice: TDevice)
      : TDevice; stdcall;
    What_is: Function(var version: shortstring): Integer; stdcall;
    // procedure AssignF(Source: TInfoDevice);
  end;

  TDevice = class sealed(TObject) // Тип - радиодеталь или устройство
  private
    fMainDevice: TDevice; // Главное устройство
    fDevType: byte;
    fRCType: shortstring;
    fRCFamily: shortstring;
    fRCModel: shortstring;
    fRCShowName: shortstring; // Имя, кот. показывается на панели
    fPortsCount: Integer;
    fImage: TImage;
    fWidth: Integer;
    fHeight: Integer;
    fSaveData: TArrayChar;
    fHostHandle: THandle; // Application Handle главной программы
    fOrigHandle: THandle; // Application Handle Dll-ки
    // Ссылки на процедуры
    fBackProcDraw: TBackProcDraw; // Процедура перерисовки
    fBackClick: TBackClick; // Процедура клика в рун-тайм
    fBackMD: TBackMouseDown; // Процедура MouseDown in run-time
    fBackMM: TBackMouseMove; // Процедура MouseMove in run-time
    fBackMU: TBackMouseUp; // Процедура MouseDown in run-time
    fGet_MCandCF: TGet_MCandCF;
    fBackDblClick: TBackDblClick; // Процедура DblClick in run-time
    fBackShowSettings: TBackShowSettings; // Процедура показа настроек
    fBackApplySaveData: TBackApplySaveData;
    // Процедура, кот. вызывается для изменения настроек устройства (после загрузки проекта)
    fBackTact: TBackTact;
    // Подключены ли процедуры

    fAssignedBackClick: boolean; // Процедура клика в рун-тайм
    fAssignedBackMD: boolean; // Процедура MouseDown in run-time
    fAssignedBackMM: boolean; // Процедура MouseMove in run-time
    fAssignedBackMU: boolean; // Процедура MouseDown in run-time
    fAssignedBackDblClick: boolean; // Процедура DblClick in run-time
    fAssignedShowSettings: boolean; // Процедура показа настроек
    fAssignedBackTact: boolean; // Процедура Такта микроконтроллера
    fAssignedGet_MCandCF: boolean;
    // Процедуры
    // Procedure ChangeSaveData(vSaveData:TArrayChar);
    Function GetLenSD: Integer;
    Procedure SetLenSD(val: Integer);

  public

    Port: TRCPorts; // Массив портов для доступа
    x_img_XX, x_img_YY: Integer; // Для перемещения Img
    InternalIndex: Integer; // Внутренний (внутри dll) индекс девайса
    Procedure AddPort(pPortName: shortstring; pDirection: byte;
      pDigital: boolean; pLevel: single; BackProcGetLevel: TBackProcGetLevel);
    Constructor Create(pInternalIndex: Integer; Width: Integer; Height: Integer;
      pDevType: byte; pRCType: shortstring; pRCFamily: shortstring;
      pRCModel: shortstring; pNumberOfPorts: Integer;
      BackProcDraw: TBackProcDraw; BackClick: TBackClick;
      BackMD: TBackMouseDown; BackMM: TBackMouseMove; BackMU: TBackMouseUp;
      BackDblClick: TBackDblClick; BackShowSettings: TBackShowSettings;
      BackApplySaveData: TBackApplySaveData; BackTact: TBackTact;
      OrigHandle: THandle; HostHandle: THandle; MainDevice: TDevice;
      Get_MCandCF: TGet_MCandCF);
    destructor Destroy;

  published
    // Свойства
    property MainDevice: TDevice read fMainDevice;
    property DevType: byte read fDevType; // Код типа
    property SaveData: TArrayChar read fSaveData write fSaveData;
    // Данные, кот сохраняются вместе с проектом
    property LenSaveData: Integer read GetLenSD write SetLenSD;
    property RCType: shortstring read fRCType; // Тип строкой
    property RCFamily: shortstring read fRCFamily; // Семейство
    property RCModel: shortstring read fRCModel; // Модель
    property RCShowName: shortstring read fRCShowName;
    // Имя, кот показывается на панели (зависит от языка)
    Property PortsCount: Integer read fPortsCount; // Количество портов
    Property Image: TImage read fImage write fImage;
    Property HostHandle: THandle read fHostHandle;
    // Application Handle главной программы
    Property OrigHandle: THandle read fOrigHandle; // Application Handle Dll-ки
    // Image Box для вывода изображения
    Property Width: Integer read fWidth; // Ширина картинки
    Property Height: Integer read fHeight; // Высота картинки
    // Подключены ли процедуры
    Property AssignedBackClick: boolean read fAssignedBackClick;
    // Процедура клика в рун-тайм
    Property AssignedBackMD: boolean read fAssignedBackMD;
    // Процедура MouseDown in run-time
    Property AssignedBackMM: boolean read fAssignedBackMM;
    // Процедура MouseMove in run-time
    Property AssignedBackMU: boolean read fAssignedBackMU;
    // Процедура MouseDown in run-time
    Property AssignedBackDblClick: boolean read fAssignedBackDblClick;
    // Процедура DblClick in run-time
    Property AssignedShowSettings: boolean read fAssignedShowSettings;
    // Процедура показа настроек
    Property AssignedBackTact: boolean read fAssignedBackTact;
    // Процедура обратного вызова в каждом такте МК

    // Процедуры вызова Call-Back
    Procedure Get_MCandCF(var vMC: Int64; var vCF: Integer); stdcall;
    Procedure DrawImage(isRunning: boolean; RunningTime: Extended);
    Procedure Click();
    Procedure DblClick();
    Procedure MouseDown(Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer);
    Procedure MouseMove(Shift: TShiftState; X, Y: Integer);
    Procedure MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    Procedure ShowSettings();
    Procedure ApplySettings();
    Procedure BackTact(Tact: Int64);

  end;

  TRCPort = class
  Private
    fPortName: shortstring; // Название порта
    fDirection: byte; // Направление 0 - отключен 1 - вход, 2 - выход, 3 - оба
    fDigital: boolean; // Тип сигнала - 1 -цифра  0 - аналог
    fLevel: single; // Уровень сигнала
    fBackProcGetLevel: TBackProcGetLevel;
    fDefaultLevel: single; // Уровень при чтении по-умолчанию
    fPortNo: Integer; // Номер порта

    // function Get_PortName():shortstring;
  protected

  Public
    Node: TNode;
    Device: TDevice;
    constructor Create(pPortName: shortstring; pDirection: byte;
      pDigital: boolean; pLevel: single; BackProcGetLevel: TBackProcGetLevel;
      pPortNo: Integer);

  Published

    property PortName: shortstring // Название порта
      read fPortName;
    property PortNo: Integer read fPortNo;
    Function GetLevel(): single;
  end;

Const
  AppVersion4Dll: shortstring = '1.0';

const
  mCHR: array [0 .. 255] of ansichar = (#0, #1, #2, #3, #4, #5, #6, #7, #8, #9,
    #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24,
    #25, #26, #27, #28, #29, #30, #31, #32, #33, #34, #35, #36, #37, #38, #39,
    #40, #41, #42, #43, #44, #45, #46, #47, #48, #49, #50, #51, #52, #53, #54,
    #55, #56, #57, #58, #59, #60, #61, #62, #63, #64, #65, #66, #67, #68, #69,
    #70, #71, #72, #73, #74, #75, #76, #77, #78, #79, #80, #81, #82, #83, #84,
    #85, #86, #87, #88, #89, #90, #91, #92, #93, #94, #95, #96, #97, #98, #99,
    #100, #101, #102, #103, #104, #105, #106, #107, #108, #109, #110, #111,
    #112, #113, #114, #115, #116, #117, #118, #119, #120, #121, #122, #123,
    #124, #125, #126, #127, #128, #129, #130, #131, #132, #133, #134, #135,
    #136, #137, #138, #139, #140, #141, #142, #143, #144, #145, #146, #147,
    #148, #149, #150, #151, #152, #153, #154, #155, #156, #157, #158, #159,
    #160, #161, #162, #163, #164, #165, #166, #167, #168, #169, #170, #171,
    #172, #173, #174, #175, #176, #177, #178, #179, #180, #181, #182, #183,
    #184, #185, #186, #187, #188, #189, #190, #191, #192, #193, #194, #195,
    #196, #197, #198, #199, #200, #201, #202, #203, #204, #205, #206, #207,
    #208, #209, #210, #211, #212, #213, #214, #215, #216, #217, #218, #219,
    #220, #221, #222, #223, #224, #225, #226, #227, #228, #229, #230, #231,
    #232, #233, #234, #235, #236, #237, #238, #239, #240, #241, #242, #243,
    #244, #245, #246, #247, #248, #249, #250, #251, #252, #253, #254, #255);

implementation

Constructor TDevice.Create(pInternalIndex: Integer; Width: Integer;
  Height: Integer; pDevType: byte; pRCType: shortstring; pRCFamily: shortstring;
  pRCModel: shortstring; pNumberOfPorts: Integer; BackProcDraw: TBackProcDraw;
  BackClick: TBackClick; BackMD: TBackMouseDown; BackMM: TBackMouseMove;
  BackMU: TBackMouseUp; BackDblClick: TBackDblClick;
  BackShowSettings: TBackShowSettings; BackApplySaveData: TBackApplySaveData;
  BackTact: TBackTact; OrigHandle: THandle; HostHandle: THandle;
  MainDevice: TDevice; Get_MCandCF: TGet_MCandCF);
begin
  // fRCShowName:=pRCShowName;

  fMainDevice := MainDevice;

  fOrigHandle := OrigHandle;
  fHostHandle := HostHandle;
  InternalIndex := pInternalIndex;
  if not assigned(BackClick) then
    fAssignedBackClick := false
  else
    fAssignedBackClick := true; // Процедура клика в рун-тайм
  if not assigned(BackMD) then
    fAssignedBackMD := false
  else
    fAssignedBackMD := true; // Процедура MouseDown in run-time
  if not assigned(BackMM) then
    fAssignedBackMM := false
  else
    fAssignedBackMM := true; // Процедура MouseMove in run-time
  if not assigned(BackMU) then
    fAssignedBackMU := false
  else
    fAssignedBackMU := true; // Процедура MouseDown in run-time
  if not assigned(BackDblClick) then
    fAssignedBackDblClick := false
  else
    fAssignedBackDblClick := true; // Процедура DblClick in run-time
  if not assigned(BackShowSettings) then
    fAssignedShowSettings := false
  else
    fAssignedShowSettings := true; // Процедура показа настроек
  if not assigned(BackTact) then
    fAssignedBackTact := false
  else
    fAssignedBackTact := true; // Кал-бэк такта
  if not assigned(Get_MCandCF) then
    fAssignedGet_MCandCF := false
  else
    fAssignedGet_MCandCF := true;

  fBackProcDraw := BackProcDraw;
  // if ((@BackProcDraw) <>Pointer(nil)) then fAssignedBackProcDraw:=true;

  fBackClick := BackClick;
  // if @BackClick<>nil then fAssignedBackClick:=true;

  fBackMD := BackMD;
  // if @BackMD<>nil then fAssignedBackMD:=true;

  fBackMM := BackMM;
  // if @BackMM<>nil then fAssignedBackMM:=true;

  fBackMU := BackMU;
  // if @BackMU<>nil then fAssignedBackMU:=true;

  fBackDblClick := BackDblClick;
  // if @BackDblClick<>nil then fAssignedBackDblClick:=true;   }

  fBackShowSettings := BackShowSettings;

  fBackApplySaveData := BackApplySaveData;

  fBackTact := BackTact;

  fGet_MCandCF := Get_MCandCF;

  fDevType := pDevType;
  fRCType := pRCType;
  fRCFamily := pRCFamily;
  fRCModel := pRCModel;
  fPortsCount := pNumberOfPorts;
  fWidth := Width;
  fHeight := Height;
  // SetLength(self.Port
  // Port := pPorts;

end;

Function TDevice.GetLenSD: Integer;
begin
  Result := High(fSaveData) + 1;
end;

Procedure TDevice.SetLenSD(val: Integer);
begin
  SetLength(fSaveData, val);
end;

Procedure TDevice.AddPort(pPortName: shortstring; pDirection: byte;
  pDigital: boolean; pLevel: single; BackProcGetLevel: TBackProcGetLevel);
begin
  SetLength(Self.Port, High(Self.Port) + 2);
  Self.Port[High(Self.Port)] := TRCPort.Create(pPortName, pDirection, pDigital,
    pLevel, BackProcGetLevel, High(Self.Port));
  Self.Port[High(Self.Port)].Device := Self;
end;

destructor TDevice.Destroy;
var
  I: Integer;
begin
  for I := 0 to fPortsCount - 1 do
    Port[I].Free;

  inherited;
end;

procedure TDevice.DrawImage(isRunning: boolean; RunningTime: Extended);
begin
  fBackProcDraw(Self, isRunning, RunningTime);
end;

Procedure TDevice.Get_MCandCF(var vMC: Int64; var vCF: Integer); stdcall;
begin
  if assigned(fMainDevice) then
    fMainDevice.fGet_MCandCF(vMC, vCF)
  else
  begin
    vMC := -1;
    vCF := -1;
  end;
end;

procedure TDevice.Click();
begin
  fBackClick(Self);
end;

procedure TDevice.ShowSettings();
begin
  fBackShowSettings(Self);
end;

Procedure TDevice.ApplySettings();
begin
  fBackApplySaveData(Self);
end;

procedure TDevice.DblClick();
begin
  fBackDblClick(Self);
end;

procedure TDevice.MouseDown(Button: TMouseButton; Shift: TShiftState;
  X, Y: Integer);
begin
  fBackMD(Self, Button, Shift, X, Y);
end;

procedure TDevice.MouseMove(Shift: TShiftState; X, Y: Integer);
begin
  fBackMM(Self, Shift, X, Y);
end;

procedure TDevice.MouseUp(Button: TMouseButton; Shift: TShiftState;
  X, Y: Integer);
begin
  fBackMU(Self, Button, Shift, X, Y);
end;

Procedure TDevice.BackTact(Tact: Int64);
begin
  fBackTact(Self, Tact);
end;

constructor TRCPort.Create(pPortName: shortstring; pDirection: byte;
  pDigital: boolean; pLevel: single; BackProcGetLevel: TBackProcGetLevel;
  pPortNo: Integer);

begin

  Self.fPortName := pPortName;
  Self.fDirection := pDirection;
  Self.fDigital := pDigital;
  Self.fDefaultLevel := pLevel;
  Self.fBackProcGetLevel := BackProcGetLevel;
  Self.fPortNo := pPortNo;
end;

Function TNode.GetLevel(): single; stdcall;

var
  I, vHigh: Integer;
  s, n: single;
  mn: Integer;
begin
  vHigh := High(Self.Ports);
  s := 0; // Уровень сигнала до деления
  mn := 0; // Количество членов для деления
  for I := 0 to vHigh do
  begin
    if Self.Ports[I].fDirection < 2 then
      continue;
    n := Self.Ports[I].GetLevel();
    if isnan(n) then
      continue;
    s := s + n;
    mn := mn + 1;
  end;
  if mn = 0 then
    Result := NaN
  else
    Result := s / mn; // Проверить, а что будет если рез-т NaN

end;

Function TRCPort.GetLevel(): single;
begin
  Result := fBackProcGetLevel(Self);
end;

end.
